
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Define default values or use Vite's environment variables
const supabaseUrl = import.meta.env.NEXT_PUBLIC_SUPABASE_URL || 'https://gtatdbpfopsxkrkgvqiv.supabase.co';
const supabaseAnonKey = import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd0YXRkYnBmb3BzeGtya2d2cWl2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3MzI2NDUsImV4cCI6MjA2MDMwODY0NX0.0yv0L-NC5moCSZ2wgsvsP7DepwxNZYTnFhopOArxOdI';

// Define custom database types for our tables
export type TableName = keyof Database['public']['Tables'];

export type QuizQuestion = {
  id: number;
  section: "Interest" | "Feasibility" | "Career Goals" | "Learning Style";
  question_text: string;
  question_type: "single-select" | "multi-select" | "text";
  options: string[] | null;
};

export type UserResponse = {
  id: number;
  user_id: string;
  question_id: string;
  response: string | null;
  response_array: string[] | null;
  created_at: string;
  quiz_type: string | null;
  score: number | null;
};

export type Module = {
  id: number;
  university: "NUS" | "NTU" | "SMU";
  course_code: string;
  title: string;
  aus_cus: number;
  semester: string;
  description: string | null;
};

export type Recommendation = {
  id: number;
  user_id: string;
  module_id: number;
  reason: string;
  created_at: string;
  module?: Module;
  reasoning?: string[];
};

export type UserFeedback = {
  id: number;
  user_id: string;
  module_id: number;
  rating: number;
  created_at: string;
};

export type UserSelection = {
  id: number;
  user_id: string;
  module_id: number;
  created_at: string;
};

export type UserSettings = {
  id: string;
  name: string | null;
  bio: string | null;
  email_notifications: boolean;
  app_notifications: boolean;
  newsletter_subscription: boolean;
  created_at: string;
  updated_at: string;
};

// Resume related types with proper JSON handling
export type ResumeEducationItem = {
  institution: string;
  degree: string;
  fieldOfStudy: string;
  startDate: string;
  endDate: string;
  grade?: string;
  description?: string;
};

export type ResumeWorkExperienceItem = {
  company: string;
  position: string;
  location?: string;
  startDate: string;
  endDate: string;
  description: string;
};

export type ResumeActivityItem = {
  name: string;
  role?: string;
  date?: string;
  description?: string;
};

export type Resume = {
  id: string;
  user_id: string;
  resumeName: string | null;
  template_type: string;
  name: string | null;
  email: string | null;
  phone: string | null;
  nationality: string | null;
  institution: string | null;
  education_dates: string | null;
  qualifications: string | null;
  awards: string | null;
  languages: string | null;
  interests: string | null;
  it_skills: string | null;
  created_at: string;
  updated_at: string;
  educationItems: ResumeEducationItem[] | null;
  work_experience: ResumeWorkExperienceItem[] | null;
  activities: ResumeActivityItem[] | null;
};

// Export Json type for proper type handling with Supabase
export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[];

// Helper functions to convert between typed arrays and Json
export const parseJsonArray = <T,>(jsonArray: Json | null | undefined, fallback: T[]): T[] => {
  if (!jsonArray) return fallback;
  try {
    if (Array.isArray(jsonArray)) {
      return jsonArray as T[];
    }
    if (typeof jsonArray === 'string') {
      return JSON.parse(jsonArray) as T[];
    }
    return fallback;
  } catch (error) {
    console.error("Error parsing JSON array:", error);
    return fallback;
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  supabaseUrl,
  supabaseAnonKey,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
  }
);
